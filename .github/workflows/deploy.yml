name: Deploy site

on:
  push:
    branches:
      - master
      - main
    paths:
      - "assets/**"
      - "**.html"
      - "**.js"
      - "**.liquid"
      - "**/*.md"
      - "**.yml"
      - "!.github/workflows/axe.yml"
      - "!.github/workflows/broken-links.yml"
      - "!.github/workflows/deploy-docker-tag.yml"
      - "!.github/workflows/deploy-image.yml"
      - "!.github/workflows/docker-slim.yml"
      - "!.github/workflows/lighthouse-badger.yml"
      - "!.github/workflows/prettier.yml"
      - "!lighthouse_results/**"
      - "!CONTRIBUTING.md"
      - "!CUSTOMIZE.md"
      - "!FAQ.md"
      - "!INSTALL.md"
      - "!README.md"
  pull_request:
    branches:
      - master
      - main
    paths:
      - "assets/**"
      - "**.html"
      - "**.js"
      - "**.liquid"
      - "**/*.md"
      - "**.yml"
      - "!.github/workflows/axe.yml"
      - "!.github/workflows/broken-links.yml"
      - "!.github/workflows/deploy-docker-tag.yml"
      - "!.github/workflows/deploy-image.yml"
      - "!.github/workflows/docker-slim.yml"
      - "!.github/workflows/lighthouse-badger.yml"
      - "!.github/workflows/prettier.yml"
      - "!lighthouse_results/**"
      - "!CONTRIBUTING.md"
      - "!CUSTOMIZE.md"
      - "!FAQ.md"
      - "!INSTALL.md"
      - "!README.md"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    # available images: https://github.com/actions/runner-images#available-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: true
      - name: Install ImageMagick & WebP tools
        run: sudo apt-get update && sudo apt-get install -y imagemagick webp
      - name: Generate responsive WebP variants (800/1400) in assets/**
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          widths=(800 1400)

          have() { command -v "$1" >/dev/null 2>&1; }

          for f in assets/**/*.{jpg,jpeg,JPG,JPEG,png,PNG,gif,GIF,tiff,TIFF}; do
            base="${f%.*}"
            ext="${f##*.}"
            ext="${ext,,}"  # lower-case

            for w in "${widths[@]}"; do
              out="${base}-${w}.webp"
              [[ -f "$out" ]] && continue

              # Try cwebp first
              if have cwebp; then
                if [[ "$ext" == "gif" ]]; then
                  # Convert only the first frame of GIFs to avoid animated issues
                  # Use ImageMagick if available; otherwise try gif2webp
                  if have convert; then
                    if convert "${f}[0]" -resize "${w}x" -quality 82 "$out"; then
                      echo "‚úÖ created $out (GIF first frame via convert)"
                      continue
                    fi
                  fi
                  if have gif2webp && gif2webp -q 82 -resize "$w" 0 "$f" -o "$out"; then
                    echo "‚úÖ created $out (animated GIF via gif2webp)"
                    continue
                  fi
                else
                  if cwebp -quiet -q 82 -resize "$w" 0 "$f" -o "$out"; then
                    echo "‚úÖ created $out (cwebp)"
                    continue
                  fi
                fi
              fi

              # Fallback to ImageMagick's 'convert' if available
              if have convert; then
                if convert "$f" -resize "${w}x" -quality 82 "$out"; then
                  echo "‚úÖ created $out (convert)"
                  continue
                fi
              fi
              echo "‚ö†Ô∏è  Skipped $f at ${w}px (no suitable converter or conversion failed)"
            done
          done

      - name: Update _config.yml ‚öôÔ∏è
        uses: fjogeleit/yaml-update-action@main
        with:
          commitChange: false
          valueFile: "_config.yml"
          propertyPath: "giscus.repo"
          value: ${{ github.repository }}
      - name: Setup Python üêç
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'          

      - name: Install Jupyter CLI (for jekyll-jupyter-notebook)
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install jupyter nbconvert notebook
          # Add the correct Scripts directory for THIS Python to PATH
          echo "$(python - <<'PY' 
          import sysconfig; print(sysconfig.get_path('scripts')) 
          PY
          )" >> "$GITHUB_PATH"
          # Sanity check
          which jupyter || true
          jupyter --version || true
      - name: Create CI config to skip notebooks
        run: |
          cat > _config_ci.yml <<'YML'
          exclude:
            - assets/jupyter/**
          YML
      - name: Remove notebooks in CI (temporary)
        shell: bash
        run: |
          rm -rf assets/jupyter || true

      - name: Install and Build üîß
        shell: bash
        run: |
          export JEKYLL_ENV=production
          bundle exec jekyll clean
          bundle exec jekyll build --lsi --config _config.yml,_config_ci.yml

      - name: Setup Node.js ‚öôÔ∏è
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Purge unused CSS üßπ
        run: |
          npm install -g purgecss
          purgecss -c purgecss.config.js
      - name: Deploy üöÄ
        if: github.event_name != 'pull_request'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: _site
